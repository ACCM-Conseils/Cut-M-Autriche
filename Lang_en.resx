<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Adam1NotConnected" xml:space="preserve">
    <value>Adam 1 not connected</value>
  </data>
  <data name="btAnnule" xml:space="preserve">
    <value>Production cancellation</value>
  </data>
  <data name="ChoisirRef" xml:space="preserve">
    <value>Choose a reference</value>
  </data>
  <data name="ChoixRef" xml:space="preserve">
    <value>Choose or enter a reference</value>
  </data>
  <data name="CloseAndStart" xml:space="preserve">
    <value>Please close the door and open the shutter.</value>
  </data>
  <data name="ConnectAdam1" xml:space="preserve">
    <value>Connected to Adam 1 module</value>
  </data>
  <data name="ConnectAdam2" xml:space="preserve">
    <value>Connected to Adam 2 module</value>
  </data>
  <data name="Consigne" xml:space="preserve">
    <value>I have read the instructions below</value>
  </data>
  <data name="Decoupe" xml:space="preserve">
    <value>Cutting in progress</value>
  </data>
  <data name="DecoupeTermine" xml:space="preserve">
    <value>Cut finished</value>
  </data>
  <data name="DemarrageDecoupe" xml:space="preserve">
    <value>Start cutting</value>
  </data>
  <data name="DepartCycle" xml:space="preserve">
    <value>Waiting to load cover and start cycle</value>
  </data>
  <data name="Fermee" xml:space="preserve">
    <value>Closed</value>
  </data>
  <data name="FermerPorte" xml:space="preserve">
    <value>Close the door</value>
  </data>
  <data name="InitAdam1" xml:space="preserve">
    <value>Adam 1 module initialisation OK</value>
  </data>
  <data name="InitAdam2" xml:space="preserve">
    <value>Adam 2 module initialisation OK</value>
  </data>
  <data name="lblInfos" xml:space="preserve">
    <value>Informations</value>
  </data>
  <data name="lblProd" xml:space="preserve">
    <value>Production in progress</value>
  </data>
  <data name="lblRef" xml:space="preserve">
    <value>Reference from file</value>
  </data>
  <data name="lblTitreDiametre" xml:space="preserve">
    <value>Diameter</value>
  </data>
  <data name="lblTitreEtage" xml:space="preserve">
    <value>Mandrel floor number</value>
  </data>
  <data name="lblTitreEtat" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="lbltitreLaser" xml:space="preserve">
    <value>Laser :</value>
  </data>
  <data name="lbltitrePorte" xml:space="preserve">
    <value>Door :</value>
  </data>
  <data name="lblTitreQte" xml:space="preserve">
    <value>Quantity remaining</value>
  </data>
  <data name="LoadMask" xml:space="preserve">
    <value>Loading the mask</value>
  </data>
  <data name="NoConnectAdam1" xml:space="preserve">
    <value>Adam 1 module initialisation impossible</value>
  </data>
  <data name="NoConnectAdam2" xml:space="preserve">
    <value>Adam 2 module initialisation impossible</value>
  </data>
  <data name="NoRef" xml:space="preserve">
    <value>No reference available</value>
  </data>
  <data name="OuvrirPorte" xml:space="preserve">
    <value>Open the door</value>
  </data>
  <data name="OuvrirShutter" xml:space="preserve">
    <value>Open the shutter</value>
  </data>
  <data name="PlacerPiece" xml:space="preserve">
    <value>Positioning the workpiece</value>
  </data>
  <data name="Quitter" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Timer1Start" xml:space="preserve">
    <value>Timer 1 started</value>
  </data>
  <data name="Timer2Start" xml:space="preserve">
    <value>Timer 2 started</value>
  </data>
</root>